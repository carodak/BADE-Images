<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['stimuli/acorn_img3.png', 'stimuli/airplane_img3.png', 'stimuli/anchor_img3.png', 'stimuli/angel_img3.png', 'stimuli/astronaut_img3.png', 'stimuli/backpack_img3.png', 'stimuli/ballerina_img3.png', 'stimuli/bat_img3.png', 'stimuli/beehive_img3.png', 'stimuli/book_img3.png', 'stimuli/cactus_img3.png', 'stimuli/cake_img3.png', 'stimuli/canoe_img3.png', 'stimuli/carousel_img3.png', 'stimuli/carrot_img3.png', 'stimuli/castle_img3.png', 'stimuli/church_img3.png', 'stimuli/clown_img3.png', 'stimuli/corn_img3.png', 'stimuli/crown_img3.png', 'stimuli/dress_img3.png', 'stimuli/fireplace_img3.png', 'stimuli/fishbowl_img3.png', 'stimuli/football_img3.png', 'stimuli/garbage can_img3.png', 'stimuli/gate_img3.png', 'stimuli/guitar_img3.png', 'stimuli/iron_img3.png', 'stimuli/key_img3.png', 'stimuli/ladybug_img3.png', 'stimuli/milk carton_img3.png', 'stimuli/monkey_img3.png', 'stimuli/mouse_img3.png', 'stimuli/NN_angel_img1.png', 'stimuli/NN_angel_img2.png', 'stimuli/NN_beehive_img1.png', 'stimuli/NN_beehive_img2.png', 'stimuli/NN_castle_img1.png', 'stimuli/NN_castle_img2.png', 'stimuli/NN_garbage can_img1.png', 'stimuli/NN_garbage can_img2.png', 'stimuli/NN_gate_img1.png', 'stimuli/NN_gate_img2.png', 'stimuli/NN_guitar_img1.png', 'stimuli/NN_guitar_img2.png', 'stimuli/NN_palm tree_img1.png', 'stimuli/NN_palm tree_img2.png', 'stimuli/NN_ring_img1.png', 'stimuli/NN_ring_img2.png', 'stimuli/NN_scissors_img1.png', 'stimuli/NN_scissors_img2.png', 'stimuli/NN_snake_img1.png', 'stimuli/NN_snake_img2.png', 'stimuli/NN_swing set_img1.png', 'stimuli/NN_swing set_img2.png', 'stimuli/NN_turkey_img1.png', 'stimuli/NN_turkey_img2.png', 'stimuli/NY_airplane_img1.png', 'stimuli/NY_airplane_img2.png', 'stimuli/NY_anchor_img1.png', 'stimuli/NY_anchor_img2.png', 'stimuli/NY_backpack_img1.png', 'stimuli/NY_backpack_img2.png', 'stimuli/NY_cactus_img1.png', 'stimuli/NY_cactus_img2.png', 'stimuli/NY_church_img1.png', 'stimuli/NY_church_img2.png', 'stimuli/NY_clown_img1.png', 'stimuli/NY_clown_img2.png', 'stimuli/NY_fishbowl_img1.png', 'stimuli/NY_fishbowl_img2.png', 'stimuli/NY_football_img1.png', 'stimuli/NY_football_img2.png', 'stimuli/NY_ladybug_img1.png', 'stimuli/NY_ladybug_img2.png', 'stimuli/NY_mouse_img1.png', 'stimuli/NY_mouse_img2.png', 'stimuli/NY_strawberry_img1.png', 'stimuli/NY_strawberry_img2.png', 'stimuli/NY_sunflower_img1.png', 'stimuli/NY_sunflower_img2.png', 'stimuli/palm tree_img3.png', 'stimuli/ring_img3.png', 'stimuli/rocket_img3.png', 'stimuli/sailboat_img3.png', 'stimuli/saw_img3.png', 'stimuli/scissors_img3.png', 'stimuli/snake_img3.png', 'stimuli/strawberry_img3.png', 'stimuli/sunflower_img3.png', 'stimuli/swing set_img3.png', 'stimuli/telephone_img3.png', 'stimuli/tent_img3.png', 'stimuli/turkey_img3.png', 'stimuli/washing machine_img3.png', 'stimuli/windmill_img3.png', 'stimuli/YN_acorn_img1.png', 'stimuli/YN_acorn_img2.png', 'stimuli/YN_astronaut_img1.png', 'stimuli/YN_astronaut_img2.png', 'stimuli/YN_bat_img1.png', 'stimuli/YN_bat_img2.png', 'stimuli/YN_canoe_img1.png', 'stimuli/YN_canoe_img2.png', 'stimuli/YN_carousel_img1.png', 'stimuli/YN_carousel_img2.png', 'stimuli/YN_dress_img1.png', 'stimuli/YN_dress_img2.png', 'stimuli/YN_iron_img1.png', 'stimuli/YN_iron_img2.png', 'stimuli/YN_monkey_img1.png', 'stimuli/YN_monkey_img2.png', 'stimuli/YN_sailboat_img1.png', 'stimuli/YN_sailboat_img2.png', 'stimuli/YN_saw_img1.png', 'stimuli/YN_saw_img2.png', 'stimuli/YN_telephone_img1.png', 'stimuli/YN_telephone_img2.png', 'stimuli/YN_washing machine_img1.png', 'stimuli/YN_washing machine_img2.png', 'stimuli/YY_ballerina_img1.png', 'stimuli/YY_ballerina_img2.png', 'stimuli/YY_book_img1.png', 'stimuli/YY_book_img2.png', 'stimuli/YY_cake_img1.png', 'stimuli/YY_cake_img2.png', 'stimuli/YY_carrot_img1.png', 'stimuli/YY_carrot_img2.png', 'stimuli/YY_corn_img1.png', 'stimuli/YY_corn_img2.png', 'stimuli/YY_crown_img1.png', 'stimuli/YY_crown_img2.png', 'stimuli/YY_fireplace_img1.png', 'stimuli/YY_fireplace_img2.png', 'stimuli/YY_key_img1.png', 'stimuli/YY_key_img2.png', 'stimuli/YY_milk carton_img1.png', 'stimuli/YY_milk carton_img2.png', 'stimuli/YY_rocket_img1.png', 'stimuli/YY_rocket_img2.png', 'stimuli/YY_tent_img1.png', 'stimuli/YY_tent_img2.png', 'stimuli/YY_windmill_img1.png', 'stimuli/YY_windmill_img2.png', 'BADEImgConditions_Eng.csv', 'BADEImgConditions_Fr.csv', 'BADEImgConditions_practice_Eng.csv', 'BADEImgConditions_practice_Fr.csv', 'ballet slippers_img1.png', 'ballet slippers_img2.png', 'ballet slippers_img3.png', 'bundle.min.js', 'button.png']" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.4" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[1.000,1.000,1.000]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="BADE_builder" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="instr2">
      <CodeComponent name="code_i2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.start();&amp;#10;kb.clearEvents();&amp;#10;&amp;#10;img2start = false;&amp;#10;frameNstart = 0;&amp;#10;img2_i2.setOpacity(0);&amp;#10;slider_is_initialized = false;&amp;#10;&amp;#10;//Adapt the color and size of the marker to the slider&amp;#10;col = new util.Color('black');&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtInstr2()&amp;#10;function SetTxtInstr2(){&amp;#10;    if (english){&amp;#10;        text1_i2.text = &quot;BALLET SLIPPERS&quot;;&amp;#10;        instr_text2.text = &quot;Once you respond, more of the picture will begin to appear. Reconsider the rating you made. If you wish to keep your previous rating, you must click again in the same place on the scale. You may change your rating as much or as little as you like. Once you make your second response, you will see the full picture and the correct word.\n \n You will now complete several practice trials before beginning the experiment. Try to respond as quickly as you can.\n \n When you are comfortable, click on \&quot;PRACTICE\&quot; to move on.&quot;;&amp;#10;        label1_i2.text = &quot;100% YES&quot;;&amp;#10;        label2_i2.text = &quot;100% NO&quot;;&amp;#10;        txt_next_i2.text = &quot;PRACTICE&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        text1_i2.text = &quot;CHAUSSONS DE BALLET&quot;;&amp;#10;        instr_text2.text = &quot;Une fois que vous avez répondu, plus de détails de l’image commenceront à apparaître. Reconsidérez l’évaluation que vous avez faite. Si vous souhaitez conserver votre évaluation précédente, vous devez cliquer de nouveau au même endroit sur l’échelle. Vous pouvez changer votre évaluation autant que vous le voulez. Une fois votre deuxième évaluation faite, vous verrez l’image entière et le mot correct.\n \n Vous allez maintenant compléter plusieurs essais de pratique, avant de commencer l’exercice. Essayez de répondre le plus vite que vous pouvez.\n \n Quand vous serez prêt, cliquez sur \&quot;S’ENTRAÎNER\&quot; pour commencer.&quot;;&amp;#10;        label1_i2.text = &quot;100% OUI&quot;;&amp;#10;        label2_i2.text = &quot;100% NON&quot;;&amp;#10;        txt_next_i2.text = &quot;S’ENTRAÎNER&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;SetTxtInstr2();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="img2start = False&amp;#10;frameNstart = 0&amp;#10;img2_i2.setOpacity(0)&amp;#10;slider_is_initialized = False&amp;#10;&amp;#10;#Adapt the color and size of the marker to the slider&amp;#10;col = 'black'&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    text1_i2.text = &quot;BALLET SLIPPERS&quot;&amp;#10;    instr_text2.text = &quot;Once you respond, more of the picture will begin to appear. Reconsider the rating you made. If you wish to keep your previous rating, you must click again in the same place on the scale. You may change your rating as much or as little as you like. Once you make your second response, you will see the full picture and the correct word.\n \n You will now complete several practice trials before beginning the experiment. Try to respond as quickly as you can.\n \n When you are comfortable, click on \&quot;PRACTICE\&quot; to move on.&quot;&amp;#10;    label1_i2.text = &quot;100% YES&quot;&amp;#10;    label2_i2.text = &quot;100% NO&quot;&amp;#10;    txt_next_i2.text = &quot;PRACTICE&quot;&amp;#10;else:&amp;#10;    text1_i2.text = &quot;CHAUSSONS DE BALLET&quot;&amp;#10;    instr_text2.text = &quot;Une fois que vous avez répondu, plus de détails de l’image commenceront à apparaître. Reconsidérez l’évaluation que vous avez faite. Si vous souhaitez conserver votre évaluation précédente, vous devez cliquer de nouveau au même endroit sur l’échelle. Vous pouvez changer votre évaluation autant que vous le voulez. Une fois votre deuxième évaluation faite, vous verrez l’image entière et le mot correct.\n \n Vous allez maintenant compléter plusieurs essais de pratique, avant de commencer l’exercice. Essayez de répondre le plus vite que vous pouvez.\n \n Quand vous serez prêt, cliquez sur \&quot;S’ENTRAÎNER\&quot; pour commencer.&quot;&amp;#10;    label1_i2.text = &quot;100% OUI&quot;&amp;#10;    label2_i2.text = &quot;100% NON&quot;&amp;#10;    txt_next_i2.text = &quot;S’ENTRAÎNER&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="keys = event.getKeys()&amp;#10;&amp;#10;#Change the color of highlighed rect&amp;#10;if next_i2.contains(mouse_i2):&amp;#10;    next_i2.opacity=0.99&amp;#10;    txt_next_i2.opacity=2&amp;#10;else:&amp;#10;    next_i2.opacity=0.73&amp;#10;    txt_next_i2.opacity=0.73&amp;#10;&amp;#10;# Initialize slider1 marker at 0 position&amp;#10;if slider_is_initialized == False and img1_i2.status == STARTED:&amp;#10;    try:&amp;#10;        slider_i2.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider_i2.marker.size = (0.05, 0.05)&amp;#10;        slider_i2.markerPos = slider_i.markerPos&amp;#10;        slider_i2._onChange(True)()&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider occurred&quot;)&amp;#10;    slider_i2.opacity=1&amp;#10;    slider_is_initialized  = True&amp;#10;&amp;#10;# Move using arrow keys&amp;#10;if slider_is_initialized and 'up' in keys:&amp;#10;    slider_i2.markerPos += 10&amp;#10;    slider_i2.recordRating(slider_i2.markerPos)&amp;#10;elif slider_is_initialized and 'down' in keys:&amp;#10;    slider_i2.markerPos -= 10&amp;#10;    slider_i2.recordRating(slider_i2.markerPos)&amp;#10;&amp;#10;if t&gt;=0.02 and img2_i2.status == NOT_STARTED:&amp;#10;    img2start = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(next_i2, txt_next_i2, mouse_i2);&amp;#10;&amp;#10;//Initialise the slider marker..&amp;#10;function InitializeSlider(){&amp;#10;    try {&amp;#10;            slider_i2._skin.STANDARD.MARKER_COLOR = col;&amp;#10;            slider_i2._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;            slider_i2.markerPos = slider_i.markerPos;&amp;#10;            slider_i2._onChange(true)();&amp;#10;    } catch (err) {}&amp;#10;}&amp;#10;&amp;#10;//Initialize slider1 marker at 0 position&amp;#10;if (!slider_is_initialized &amp;&amp; img1_i2.status === STARTED){&amp;#10;    InitializeSlider();&amp;#10;    slider_i2.setOpacity(1);&amp;#10;    slider_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;function movingSliderWArrowKeys(mySlider){&amp;#10;    let keys = kb.getKeys({keyList: [&quot;up&quot;, &quot;down&quot;], waitRelease: false, clear: true});&amp;#10;    let key_name = &quot;&quot;;&amp;#10;    let key_duration = &quot;&quot;;&amp;#10;    &amp;#10;    if (keys.length &lt;= 0) return;&amp;#10;    &amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    &amp;#10;    if (slider_is_initialized &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;    }&amp;#10;        &amp;#10;    else if (slider_is_initialized &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;movingSliderWArrowKeys(slider_i2);&amp;#10;&amp;#10;if ((((t &gt;= 0.2) &amp;&amp; (img2_i2.status === NOT_STARTED)))) {&amp;#10;    img2start = true;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="img1_i2.setOpacity(0);&amp;#10;kb.clock.reset();&amp;#10;kb.stop();&amp;#10;kb.clearEvents();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="img1_i2.setOpacity(0)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_i2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="img1_i2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ballet slippers_img1.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="img1_i2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.4)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="img2_i2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ballet slippers_img2.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="img2_i2" valType="code" updates="None" name="name"/>
        <Param val="(frameN)/600" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.4)" valType="list" updates="constant" name="size"/>
        <Param val="0.2" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text1_i2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text1_i2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="BALLET SLIPPERS" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="slider_i2">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_i2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3,0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.35)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="False" valType="bool" updates="constant" name="storeRating"/>
        <Param val="False" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="instr_text2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instr_text2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Once you respond, more of the picture will begin to appear. Reconsider the rating you made. You may change your rating as much or as little as you like. Once you make your second response, you will see the full picture and the correct word.&amp;#10;&amp;#10;You will now complete several practice trials before beginning the experiment. Try to respond as quickly as you can.&amp;#10;&amp;#10;When you are comfortable, click on “next” to move on." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label1_i2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label1_i2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0.462)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% YES" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label2_i2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label2_i2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0.038)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% NO" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_i2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_i2" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.455)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_i2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_i2" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_i2.pos" valType="list" updates="set every frame" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_i2">
        <Param val="next_i2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_i2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instr">
      <CodeComponent name="code_JS">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;&amp;#10;kb = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true});" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.start();&amp;#10;kb.clearEvents();&amp;#10;&amp;#10;img1start = false;&amp;#10;img1_i.setOpacity(0);&amp;#10;&amp;#10; slider_is_initialized = false;&amp;#10;&amp;#10;//Adapt the color and size of the marker to the slider&amp;#10;col = new util.Color('black');&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtInstr()&amp;#10;function SetTxtInstr(){&amp;#10;    if (english){&amp;#10;        text1_i.text = &quot;BALLET SLIPPERS&quot;;&amp;#10;        instr_text1.text = &quot;\nIn this task, you will be asked to identify pictures. You will be shown a picture gradually with a word listed below it, just like in the example above. Your job is to rate whether you think the word accurately describes what the full picture will be.\n \n Practice using your mouse or touchpad to select your rating by clicking or dragging the slider up and down the scale. You can make your rating at any point along the scale, depending on how confident you are in your response.\n \n When you are comfortable, click on \&quot;NEXT\&quot; to move on.&quot;;&amp;#10;        label1_i.text = &quot;100% YES&quot;;&amp;#10;        label2_i.text = &quot;100% NO&quot;;&amp;#10;        txt_next_i.text = &quot;NEXT&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        text1_i.text = &quot;CHAUSSONS DE BALLET&quot;;&amp;#10;        instr_text1.text = &quot;Dans cette tâche, vous devrez identifier des images. Vous allez voir graduellement une image, avec un mot écrit en-dessous. Évaluez si vous croyez que le mot décrit de manière adéquate l’image entière.\n \n Vous allez utiliser la souris ou le pavé tactile pour évaluer. Cliquez sur le bouton gauche sur l'échelle ou appuyez et maintenez le bouton pour déplacer le curseur vers oui ou non. Vous pouvez faire vos évaluations à n’importe quel endroit sur l’échelle, dépendamment à quel point vous êtes confiant de votre réponse.\n \n Quand vous serez prêt, cliquez sur \&quot;SUIVANT\&quot; pour commencer.&quot;;&amp;#10;        label1_i.text = &quot;100% OUI&quot;;&amp;#10;        label2_i.text = &quot;100% NON&quot;;&amp;#10;        txt_next_i.text = &quot;SUIVANT&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;SetTxtInstr();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="img1start = False&amp;#10;img1_i.opacity = 0&amp;#10;&amp;#10;slider_is_initialized = False&amp;#10;&amp;#10;#Adapt the color and size of the marker to the slider&amp;#10;col = 'black'&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    text1_i.text = &quot;BALLET SLIPPERS&quot;&amp;#10;    instr_text1.text = &quot;\nIn this task, you will be asked to identify pictures. You will be shown a picture gradually with a word listed below it, just like in the example above. Your job is to rate whether you think the word accurately describes what the full picture will be.\n \n Practice using your mouse or touchpad to select your rating by clicking or dragging the slider up and down the scale. You can make your rating at any point along the scale, depending on how confident you are in your response.\n \n When you are comfortable, click on \&quot;NEXT\&quot; to move on.&quot;&amp;#10;    label1_i.text = &quot;100% YES&quot;&amp;#10;    label2_i.text = &quot;100% NO&quot;&amp;#10;    txt_next_i.text = &quot;NEXT&quot;&amp;#10;else:&amp;#10;    text1_i.text = &quot;CHAUSSONS DE BALLET&quot;&amp;#10;    instr_text1.text = &quot;Dans cette tâche, vous devrez identifier des images. Vous allez voir graduellement une image, avec un mot écrit en-dessous. Évaluez si vous croyez que le mot décrit de manière adéquate l’image entière.\n \n Vous allez utiliser la souris ou le pavé tactile pour évaluer. Cliquez sur le bouton gauche sur l'échelle ou appuyez et maintenez le bouton pour déplacer le curseur vers oui ou non. Vous pouvez faire vos évaluations à n’importe quel endroit sur l’échelle, dépendamment à quel point vous êtes confiant de votre réponse.\n \n Quand vous serez prêt, cliquez sur \&quot;SUIVANT\&quot; pour commencer.&quot;&amp;#10;    label1_i.text = &quot;100% OUI&quot;&amp;#10;    label2_i.text = &quot;100% NON&quot;&amp;#10;    txt_next_i.text = &quot;SUIVANT&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="keys = event.getKeys()&amp;#10;&amp;#10;#Change the color of highlighed rect&amp;#10;if next_i.contains(mouse_i):&amp;#10;    next_i.opacity = 0.99&amp;#10;    txt_next_i.opacity = 2&amp;#10;else:&amp;#10;    next_i.opacity = 0.73&amp;#10;    txt_next_i.opacity = 0.73&amp;#10;&amp;#10;# Initialize slider1 marker at 0 position&amp;#10;if slider_is_initialized == False and img1_i.status == STARTED:&amp;#10;    try:&amp;#10;        slider_i.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider_i.marker.size = (0.05, 0.05)&amp;#10;        slider_i.markerPos = 0&amp;#10;        slider_i._onChange(True)()&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider occurred&quot;)&amp;#10;    slider_i.opacity = 1&amp;#10;    slider_is_initialized  = True&amp;#10;&amp;#10;# Moving slider using arrowKeys&amp;#10;if slider_is_initialized and 'up' in keys:&amp;#10;    slider_i.markerPos += 10&amp;#10;    slider_i.recordRating(slider_i.markerPos)&amp;#10;elif slider_is_initialized and 'down' in keys:&amp;#10;    slider_i.markerPos -= 10&amp;#10;    slider_i.recordRating(slider_i.markerPos)&amp;#10;&amp;#10;if t&gt;=0.02 and img1_i.status == NOT_STARTED:&amp;#10;    img1start = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(next_i, txt_next_i, mouse_i);&amp;#10;&amp;#10;//Initialise the slider marker..&amp;#10;function InitializeSlider(){&amp;#10;    try {&amp;#10;            slider_i._skin.STANDARD.MARKER_COLOR = col;&amp;#10;            slider_i._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;            slider_i.markerPos = 0;&amp;#10;            slider_i._onChange(true)();&amp;#10;    } catch (err) {}&amp;#10;}&amp;#10;&amp;#10;//Initialize slider1 marker at 0 position&amp;#10;if (!slider_is_initialized &amp;&amp; img1_i.status === STARTED){&amp;#10;    InitializeSlider();&amp;#10;    slider_i.setOpacity(1);&amp;#10;    slider_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;function movingSliderWArrowKeys(mySlider){&amp;#10;    let keys = kb.getKeys({keyList: [&quot;up&quot;, &quot;down&quot;], waitRelease: false, clear: true});&amp;#10;    let key_name = &quot;&quot;;&amp;#10;    let key_duration = &quot;&quot;;&amp;#10;    &amp;#10;    if (keys.length &lt;= 0) return;&amp;#10;    &amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    &amp;#10;    if (slider_is_initialized &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;    }&amp;#10;        &amp;#10;    else if (slider_is_initialized &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;movingSliderWArrowKeys(slider_i);&amp;#10;&amp;#10;if ((((t &gt;= 0.02) &amp;&amp; (img1_i.status === NOT_STARTED)))) {&amp;#10;    img1start = true;&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.stop();&amp;#10;kb.clearEvents();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_JS" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="img1_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="ballet slippers_img1.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="img1_i" valType="code" updates="None" name="name"/>
        <Param val="(frameN)/300" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.4)" valType="list" updates="constant" name="size"/>
        <Param val="0.02" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img1start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text1_i">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text1_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="BALLET SLIPPERS" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="slider_i">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3,0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.35)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="False" valType="bool" updates="constant" name="storeRating"/>
        <Param val="False" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="instr_text1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="instr_text1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In this task, you will be asked to identify pictures. You will be shown a picture gradually with a word listed below it, just like in the example above. Your job is to rate whether you think the word accurately describes what the full picture will be.&amp;#10;&amp;#10;Practice using your mouse to select your rating by clicking or dragging the slider up and down the scale. You can make your rating at any point along the scale, depending on how confident you are in your response.&amp;#10;&amp;#10;When you are comfortable, click on “next” to move on." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label1_i">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label1_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0.462)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% YES" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label2_i">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label2_i" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.3, 0.038)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% NO" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_i" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.469)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_i">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_i" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_i.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="NEXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_i">
        <Param val="next_i" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_i" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="practice">
      <CodeComponent name="code_pr">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.start();&amp;#10;kb.clearEvents();&amp;#10;&amp;#10;img2start = false;&amp;#10;img3start = false;&amp;#10;img1stop = false;&amp;#10;image_1pr.setOpacity(0);&amp;#10;image_2pr.setOpacity(0);&amp;#10;startingPos1 = true;&amp;#10;startingPos2 = true;&amp;#10;//Adapt the color and size of the marker to the slider&amp;#10;col = new util.Color('black');&amp;#10;&amp;#10;//Display rating&amp;#10;rating_val_pr.setAlignHoriz('right');&amp;#10;preview_pos = [0.613, 0];&amp;#10;rating_val_pr.setPos(preview_pos);&amp;#10;&amp;#10;//Sliders&amp;#10;slider1_is_initialized = false;&amp;#10;slider2_is_initialized = false;&amp;#10;&amp;#10;slider_pr.lastrating = &quot;&quot;;&amp;#10;&amp;#10;txtScoreY = &quot;&quot;;&amp;#10;txtScoreN = &quot;&quot;;&amp;#10;//opacity timers&amp;#10;timer1 = new util.Clock();&amp;#10;timer2 = new util.Clock();&amp;#10;opacity1 = 0;&amp;#10;opacity2 = 0;&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtPractice()&amp;#10;function SetTxtPractice(){&amp;#10;    if (english){&amp;#10;        label1_pr.text = &quot;100% YES&quot;;&amp;#10;        label2_pr.text = &quot;100% NO&quot;;&amp;#10;        txtScoreY = &quot;% YES&quot;;&amp;#10;        txtScoreN = &quot;% NO&quot;;&amp;#10;        //rate_instr_pr.text = &quot;Select your rating&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        label1_pr.text = &quot;100% OUI&quot;;&amp;#10;        label2_pr.text = &quot;100% NON&quot;;&amp;#10;        txtScoreY = &quot;% OUI&quot;;&amp;#10;        txtScoreN = &quot;% NON&quot;;&amp;#10;        //rate_instr_pr.text = &quot;Choisissez votre note&quot;;&amp;#10;    }&amp;#10;}&amp;#10;SetTxtPractice();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="img2start = False&amp;#10;img3start = False&amp;#10;img1stop = False&amp;#10;image_1pr.opacity = 0&amp;#10;image_2pr.opacity = 0&amp;#10;startingPos1 = True&amp;#10;startingPos2 = True&amp;#10;&amp;#10;#Adapt the color and size of the marker to the slider&amp;#10;col = 'black'&amp;#10;&amp;#10;#Show rating&amp;#10;preview_pos = (0.613, 0)&amp;#10;rating_val_pr.setPos(preview_pos)&amp;#10;rating_val_pr.alignHoriz='right'&amp;#10;# the position of the rating value differs using Python (probably because of the alignHoriz function), so we are fixing it&amp;#10;&amp;#10;#Sliders&amp;#10;slider1_is_initialized = False&amp;#10;slider2_is_initialized = False&amp;#10;&amp;#10;slider_pr.lastrating = &quot;&quot;&amp;#10;&amp;#10;#Show scores&amp;#10;txtScoreY = &quot;&quot;&amp;#10;txtScoreN = &quot;&quot;&amp;#10;&amp;#10;#opacity timers&amp;#10;timer1 = core.Clock()&amp;#10;timer2 = core.Clock()&amp;#10;opacity1 = 0&amp;#10;opacity2 = 0&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    label1_pr.text = &quot;100% YES&quot;&amp;#10;    label2_pr.text = &quot;100% NO&quot;&amp;#10;    txtScoreY = &quot;% YES&quot;&amp;#10;    txtScoreN = &quot;% NO&quot;&amp;#10;else:&amp;#10;    label1_pr.text = &quot;100% OUI&quot;&amp;#10;    label2_pr.text = &quot;100% NON&quot;&amp;#10;    txtScoreY = &quot;% OUI&quot;&amp;#10;    txtScoreN = &quot;% NON&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# Initialize slider1 marker at 0 position&amp;#10;if slider1_is_initialized == False and image_1pr.status == STARTED:&amp;#10;    try:&amp;#10;        slider_pr.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider_pr.marker.size = (0.05, 0.05)&amp;#10;        slider_pr.markerPos = 0&amp;#10;        slider1_is_initialized = True&amp;#10;        slider_pr._onChange(True)()&amp;#10;        slider_pr._setupSlider()&amp;#10;        timer1.add(5)&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider 1 occurred&quot;)&amp;#10;# Initialize slider2 marker at slider1marker position&amp;#10;if slider2_is_initialized == False and image_2pr.status == STARTED:&amp;#10;    slider_pr2.markerPos = slider_pr.markerPos&amp;#10;    try:&amp;#10;        slider_pr2.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider_pr2.marker.size = (0.05, 0.05)&amp;#10;        slider2_is_initialized = True&amp;#10;        slider_pr2._onChange(True)()&amp;#10;        slider_pr2._setupSlider()&amp;#10;        slider_pr2.draw()&amp;#10;        slider_pr2.setAutoDraw(True)&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider 2 occurred&quot;)&amp;#10;&amp;#10;&amp;#10;# Compute opacities&amp;#10;if opacity1&lt;1 and not img2start:&amp;#10;    opacity1 = (timer1.getTime())/5&amp;#10;elif opacity2&lt;1 and img2start:&amp;#10;    opacity2 = (timer2.getTime())/5&amp;#10;&amp;#10;# Detect if we moved the marker&amp;#10;if not img2start and slider_pr.marker.contains(mouse_pr) and mouse_pr.getPressed()[0] == True:&amp;#10;    startingPos1 = False&amp;#10;&amp;#10;# Get keys&amp;#10;keys = event.getKeys()&amp;#10;&amp;#10;# Moving slider using arrowKeys&amp;#10;if not img2start and 'up' in keys:&amp;#10;    slider_pr.markerPos += 10&amp;#10;    slider_pr.recordRating(slider_pr.markerPos)&amp;#10;    startingPos1 = False&amp;#10;elif not img2start and 'down' in keys:&amp;#10;    slider_pr.markerPos -= 10&amp;#10;    slider_pr.recordRating(slider_pr.markerPos)&amp;#10;    startingPos1 = False&amp;#10;&amp;#10;#print rating next to slider before releasing the mouse&amp;#10;if not img2start and not startingPos1:&amp;#10;    #display rating value&amp;#10;    val = round(slider_pr.markerPos)&amp;#10;    if val&gt;=0:&amp;#10;        rating_val_pr.text = str(int(abs(val)))+txtScoreY&amp;#10;    else:&amp;#10;        rating_val_pr.text = str(int(abs(val)))+txtScoreN&amp;#10;        &amp;#10;# Detect if we moved the marker&amp;#10;if img2start and slider_pr2.marker.contains(mouse_pr) and mouse_pr.getPressed()[0] == True:&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;&amp;#10;# Moving slider using arrowKeys&amp;#10;if img2start and 'up' in keys:&amp;#10;    slider_pr2.markerPos += 10&amp;#10;    slider_pr2.recordRating(slider_pr2.markerPos)&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;elif img2start and 'down' in keys:&amp;#10;    slider_pr2.markerPos -= 10&amp;#10;    slider_pr2.recordRating(slider_pr2.markerPos)&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;    &amp;#10;#print rating next to slider before releasing the mouse&amp;#10;if img2start and not startingPos2:&amp;#10;    #display rating value&amp;#10;    val = round(slider_pr2.markerPos)&amp;#10;    if val&gt;=0:&amp;#10;        rating_val_pr.text = str(int(abs(val)))+txtScoreY&amp;#10;    else:&amp;#10;        rating_val_pr.text = str(int(abs(val)))+txtScoreN&amp;#10;&amp;#10;#Start img2 and img3&amp;#10;if index &gt; 0:&amp;#10;    if t &gt;= 5.0 and image_2pr.status == NOT_STARTED and image_1pr.opacity &gt;= 1:&amp;#10;        img2start = True&amp;#10;        slider_pr2.reset()&amp;#10;        rating_val_pr.text = &quot;&quot;&amp;#10;        slider_pr.lastrating = slider_pr.markerPos&amp;#10;        timer2.reset()&amp;#10;    elif t &gt;= 10.0 and image_3pr.status == NOT_STARTED and image_2pr.opacity &gt;= 1:&amp;#10;        img3start = True&amp;#10;        img1stop = True&amp;#10;elif slider_pr.getRating()!=None and image_2pr.status == NOT_STARTED and image_1pr.opacity &gt;= 1:&amp;#10;    img2start = True&amp;#10;    slider_pr2.reset()&amp;#10;    slider_pr.lastrating = slider_pr.markerPos&amp;#10;    timer2.reset()&amp;#10;    rating_val_pr.text = &quot;&quot;&amp;#10;elif slider_pr2.getRating()!=None and image_3pr.status == NOT_STARTED and image_2pr.opacity &gt;= 1:&amp;#10;    img3start = True&amp;#10;    img1stop = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="function InitializeSlider1(){&amp;#10;     try {&amp;#10;        slider_pr._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider_pr._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;        slider_pr.markerPos = 0;&amp;#10;        slider_pr._onChange(true)();&amp;#10;        //slider._setupSlider();&amp;#10;    } catch (err) {}&amp;#10;    slider1_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;//Initialize slider 2&amp;#10;function InitializeSlider2(){&amp;#10;    try {&amp;#10;        slider_pr2._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider_pr2._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;        slider_pr2._onChange(true)();&amp;#10;        //slider_pr2._setupSlider();&amp;#10;        slider_pr2.draw();&amp;#10;        slider_pr2.setAutoDraw(true);&amp;#10;    } catch (err) {}&amp;#10;    slider2_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;//Initialize slider1 marker at 0 position&amp;#10;if (!slider1_is_initialized &amp;&amp; image_1pr.status === STARTED){&amp;#10;    InitializeSlider1();&amp;#10;}&amp;#10;&amp;#10;//Initialize slider2 marker at slider1 marker position&amp;#10;if (!slider2_is_initialized &amp;&amp; image_2pr.status === STARTED){&amp;#10;    slider_pr2.markerPos = slider_pr.lastrating;&amp;#10;    InitializeSlider2();&amp;#10;}&amp;#10;&amp;#10;// Compute opacities&amp;#10;if(opacity1&lt;1 &amp;&amp; !img2start){&amp;#10;    opacity1 = (timer1.getTime())/5;&amp;#10;}&amp;#10;else if(opacity2&lt;1 &amp;&amp; img2start){&amp;#10;    opacity2 = (timer2.getTime())/5;&amp;#10;}&amp;#10;&amp;#10;//Detect if we moved the marker using mouse position&amp;#10;if (startingPos1 &amp;&amp; !img2start &amp;&amp; mouse_pr.getPressed()[0] === 1 &amp;&amp; mouse_pr.getPos()[0] &gt;= 0.475 &amp;&amp; mouse_pr.getPos()[0] &lt;= 0.525 &amp;&amp; mouse_pr.getPos()[1] &gt;= -0.25 &amp;&amp; mouse_pr.getPos()[1] &lt;= 0.25){&amp;#10;    startingPos1 = false;&amp;#10;}&amp;#10;&amp;#10;// Get keys&amp;#10;let keys = kb.getKeys({keyList: [&quot;up&quot;, &quot;down&quot;], waitRelease: false, clear: true});&amp;#10;let key_name = &quot;&quot;;&amp;#10;let key_duration = &quot;&quot;;&amp;#10;&amp;#10;function movingSlider1WArrowKeys(mySlider){&amp;#10;    if (!img2start &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos1 = false;&amp;#10;    }&amp;#10;        &amp;#10;    else if (!img2start &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos1 = false;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if (keys.length &gt; 0){&amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    movingSlider1WArrowKeys(slider_pr);&amp;#10;}&amp;#10;    &amp;#10;// print rating next to slider before releasing the mouse&amp;#10;if (!img2start &amp;&amp; !startingPos1) {&amp;#10;    // display rating value&amp;#10;    val = Math.round(slider_pr.markerPos)&amp;#10;    rating_val_pr.text = val &gt;= 0 ? Math.abs(val)+txtScoreY : Math.abs(val)+txtScoreN;&amp;#10;}&amp;#10;&amp;#10;if (startingPos2 &amp;&amp; img2start &amp;&amp; mouse_pr.getPressed()[0] === 1 &amp;&amp; mouse_pr.getPos()[0] &gt;= 0.475 &amp;&amp; mouse_pr.getPos()[0] &lt;= 0.525 &amp;&amp; mouse_pr.getPos()[1] &gt;= -0.25 &amp;&amp; mouse_pr.getPos()[1] &lt;= 0.25){&amp;#10;    startingPos2 = false;&amp;#10;    img1stop = true;&amp;#10;}&amp;#10;&amp;#10;function movingSlider2WArrowKeys(mySlider){&amp;#10;    if (img2start &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos2 = false;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;        &amp;#10;    else if (img2start &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos2 = false;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if (keys.length &gt; 0){&amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    movingSlider2WArrowKeys(slider_pr2);&amp;#10;}&amp;#10;&amp;#10;//Save rating of slider_pr on img2&amp;#10;if (img2start &amp;&amp; !startingPos2) {&amp;#10;    // display rating value&amp;#10;    val = Math.round(slider_pr2.markerPos)&amp;#10;    rating_val_pr.text = val &gt;= 0 ? Math.abs(val)+txtScoreY : Math.abs(val)+txtScoreN;&amp;#10;}&amp;#10;&amp;#10;//Start img2 and img3&amp;#10;if (index &gt; 0) {&amp;#10;    if (t &gt;= 5.0 &amp;&amp; image_2pr.status === NOT_STARTED &amp;&amp; image_1pr.opacity &gt;= 1) {&amp;#10;        img2start = true;&amp;#10;        //slider_pr2.reset();&amp;#10;        slider_pr.lastrating = slider_pr.markerPos;&amp;#10;        timer2.reset();&amp;#10;        rating_val_pr.text = &quot;&quot;;&amp;#10;    } else {&amp;#10;        if (t &gt;= 10.0 &amp;&amp; image_3pr.status === NOT_STARTED &amp;&amp; image_2pr.opacity &gt;= 1) {&amp;#10;            img3start = true;&amp;#10;            img1stop = true;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if (slider_pr.getRating() !== undefined &amp;&amp; image_2pr.status === NOT_STARTED &amp;&amp; image_1pr.opacity &gt;= 1) {&amp;#10;        img2start = true;&amp;#10;        //slider_pr2.reset();&amp;#10;        slider_pr.lastrating = slider_pr.markerPos;&amp;#10;        timer2.reset();&amp;#10;        rating_val_pr.text = &quot;&quot;;&amp;#10;    }&amp;#10;    if (slider_pr2.getRating() !== undefined &amp;&amp; image_3pr.status === NOT_STARTED &amp;&amp; image_2pr.opacity &gt;= 1) {&amp;#10;        img3start = true;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.stop();&amp;#10;kb.clearEvents();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_pr" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_1pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_1pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img2start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_1" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_2pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_2pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_2" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_3pr">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="1" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_3pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="10" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img3start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_3" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="image_1pr">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_1" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_1pr" valType="code" updates="None" name="name"/>
        <Param val="opacity1" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_2pr">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="6" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_2" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_2pr" valType="code" updates="None" name="name"/>
        <Param val="opacity2" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_3pr">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_3" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_3pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="10" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img3start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <SliderComponent name="slider_pr">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5,0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.45)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img1stop == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider_pr2">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_pr2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5,0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.45)" valType="list" updates="constant" name="size"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="label1_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label1_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5, 0.266)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% YES" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label2_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label2_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5, -0.266)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% NO" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="rating_val_pr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="rating_val_pr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="preview_pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_pr">
        <Param val="slider_pr, slider_pr2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_pr" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="every frame" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="nbRating = float(&quot;inf&quot;)&amp;#10;currentTrial = 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="nbRating = Number.POSITIVE_INFINITY;&amp;#10;&amp;#10;// Save additionals data later&amp;#10;var condition_type, response_condition, degree_change;&amp;#10;currentTrial = 1;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="kb.clock.reset();&amp;#10;kb.start();&amp;#10;kb.clearEvents();&amp;#10;&amp;#10;img2start = false;&amp;#10;img3start = false;&amp;#10;img1stop = false;&amp;#10;image_1.setOpacity(0);&amp;#10;image_2.setOpacity(0);&amp;#10;startingPos1 = true;&amp;#10;startingPos2 = true;&amp;#10;//Adapt the color and size of the marker to the slider&amp;#10;col = new util.Color('black');&amp;#10;&amp;#10;//Display rating&amp;#10;rating_val.setAlignHoriz('right');&amp;#10;preview_pos = [0.613, 0];&amp;#10;rating_val.setPos(preview_pos);&amp;#10;&amp;#10;//Sliders&amp;#10;slider1_is_initialized = false;&amp;#10;slider2_is_initialized = false;&amp;#10;&amp;#10;slider.lastrating = &quot;&quot;;&amp;#10;&amp;#10;txtScoreY = &quot;&quot;;&amp;#10;txtScoreN = &quot;&quot;;&amp;#10;//opacity timers&amp;#10;timer1 = new util.Clock();&amp;#10;timer2 = new util.Clock();&amp;#10;opacity1 = 0;&amp;#10;opacity2 = 0;&amp;#10;&amp;#10;//Change the text according to the selected language, function SetTxtPractice()&amp;#10;function SetTxtPractice(){&amp;#10;    if (english){&amp;#10;        label1.text = &quot;100% YES&quot;;&amp;#10;        label2.text = &quot;100% NO&quot;;&amp;#10;        txtScoreY = &quot;% YES&quot;;&amp;#10;        txtScoreN = &quot;% NO&quot;;&amp;#10;        //rate_instr_pr.text = &quot;Select your rating&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        label1.text = &quot;100% OUI&quot;;&amp;#10;        label2.text = &quot;100% NON&quot;;&amp;#10;        txtScoreY = &quot;% OUI&quot;;&amp;#10;        txtScoreN = &quot;% NON&quot;;&amp;#10;        //rate_instr_pr.text = &quot;Choisissez votre note&quot;;&amp;#10;    }&amp;#10;}&amp;#10;SetTxtPractice();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="img2start = False&amp;#10;img3start = False&amp;#10;img1stop = False&amp;#10;image_1.opacity = 0&amp;#10;image_2.opacity = 0&amp;#10;startingPos1 = True&amp;#10;startingPos2 = True&amp;#10;&amp;#10;#Adapt the color and size of the marker to the slider&amp;#10;col = 'black'&amp;#10;&amp;#10;#Show rating&amp;#10;preview_pos = (0.613, 0)&amp;#10;rating_val.setPos(preview_pos)&amp;#10;rating_val.alignHoriz='right'&amp;#10;# the position of the rating value differs using Python (probably because of the alignHoriz function), so we are fixing it&amp;#10;&amp;#10;#Sliders&amp;#10;slider1_is_initialized = False&amp;#10;slider2_is_initialized = False&amp;#10;&amp;#10;slider.lastrating = &quot;&quot;&amp;#10;&amp;#10;#Show scores&amp;#10;txtScoreY = &quot;&quot;&amp;#10;txtScoreN = &quot;&quot;&amp;#10;&amp;#10;#opacity timers&amp;#10;timer1 = core.Clock()&amp;#10;timer2 = core.Clock()&amp;#10;opacity1 = 0&amp;#10;opacity2 = 0&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr()&amp;#10;if english:&amp;#10;    label1.text = &quot;100% YES&quot;&amp;#10;    label2.text = &quot;100% NO&quot;&amp;#10;    txtScoreY = &quot;% YES&quot;&amp;#10;    txtScoreN = &quot;% NO&quot;&amp;#10;else:&amp;#10;    label1.text = &quot;100% OUI&quot;&amp;#10;    label2.text = &quot;100% NON&quot;&amp;#10;    txtScoreY = &quot;% OUI&quot;&amp;#10;    txtScoreN = &quot;% NON&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="# Initialize slider1 marker at 0 position&amp;#10;if slider1_is_initialized == False and image_1.status == STARTED:&amp;#10;    try:&amp;#10;        slider.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider.marker.size = (0.05, 0.05)&amp;#10;        slider.markerPos = 0&amp;#10;        slider1_is_initialized = True&amp;#10;        slider._onChange(True)()&amp;#10;        slider._setupSlider()&amp;#10;        timer1.add(5)&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider 1 occurred&quot;)&amp;#10;# Initialize slider2 marker at slider1marker position&amp;#10;if slider2_is_initialized == False and image_2.status == STARTED:&amp;#10;    slider2.markerPos = slider.markerPos&amp;#10;    try:&amp;#10;        slider2.marker.setColor(col, colorSpace='rgb')&amp;#10;        slider2.marker.size = (0.05, 0.05)&amp;#10;        slider2_is_initialized = True&amp;#10;        slider2._onChange(True)()&amp;#10;        slider2._setupSlider()&amp;#10;        slider2.draw()&amp;#10;        slider2.setAutoDraw(True)&amp;#10;    except:&amp;#10;        print(&quot;An exception while initializing slider 2 occurred&quot;)&amp;#10;&amp;#10;&amp;#10;# Compute opacities&amp;#10;if opacity1&lt;1 and not img2start:&amp;#10;    opacity1 = (timer1.getTime())/5&amp;#10;elif opacity2&lt;1 and img2start:&amp;#10;    opacity2 = (timer2.getTime())/5&amp;#10;&amp;#10;# Detect if we moved the marker&amp;#10;if not img2start and slider.marker.contains(mouse) and mouse.getPressed()[0] == True:&amp;#10;    startingPos1 = False&amp;#10;&amp;#10;# Get keys&amp;#10;keys = event.getKeys()&amp;#10;&amp;#10;# Moving slider using arrowKeys&amp;#10;if not img2start and 'up' in keys:&amp;#10;    slider.markerPos += 10&amp;#10;    slider.recordRating(slider.markerPos)&amp;#10;    startingPos1 = False&amp;#10;elif not img2start and 'down' in keys:&amp;#10;    slider.markerPos -= 10&amp;#10;    slider.recordRating(slider.markerPos)&amp;#10;    startingPos1 = False&amp;#10;&amp;#10;#print rating next to slider before releasing the mouse&amp;#10;if not img2start and not startingPos1:&amp;#10;    #display rating value&amp;#10;    val = round(slider.markerPos)&amp;#10;    if val&gt;=0:&amp;#10;        rating_val.text = str(int(abs(val)))+txtScoreY&amp;#10;    else:&amp;#10;        rating_val.text = str(int(abs(val)))+txtScoreN&amp;#10;        &amp;#10;# Detect if we moved the marker&amp;#10;if img2start and slider2.marker.contains(mouse) and mouse.getPressed()[0] == True:&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;&amp;#10;# Moving slider using arrowKeys&amp;#10;if img2start and 'up' in keys:&amp;#10;    slider2.markerPos += 10&amp;#10;    slider2.recordRating(slider2.markerPos)&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;elif img2start and 'down' in keys:&amp;#10;    slider2.markerPos -= 10&amp;#10;    slider2.recordRating(slider2.markerPos)&amp;#10;    startingPos2 = False&amp;#10;    img1stop = True&amp;#10;    &amp;#10;#print rating next to slider before releasing the mouse&amp;#10;if img2start and not startingPos2:&amp;#10;    #display rating value&amp;#10;    val = round(slider2.markerPos)&amp;#10;    if val&gt;=0:&amp;#10;        rating_val.text = str(int(abs(val)))+txtScoreY&amp;#10;    else:&amp;#10;        rating_val.text = str(int(abs(val)))+txtScoreN&amp;#10;&amp;#10;#Start img2 and img3&amp;#10;if t &gt;= 5 and image_2.status == NOT_STARTED and image_1.opacity &gt;= 1.0:&amp;#10;    img2start = True&amp;#10;    slider2.reset()&amp;#10;    slider.lastrating = slider.markerPos&amp;#10;    timer2.reset()&amp;#10;    rating_val.text = &quot;&quot;&amp;#10;elif t &gt;= 10.0 and image_3.status == NOT_STARTED and image_2.opacity &gt;= 1.0:&amp;#10;    img3start = True&amp;#10;    img1stop = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="function InitializeSlider1(){&amp;#10;     try {&amp;#10;        slider._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;        slider.markerPos = 0;&amp;#10;        slider._onChange(true)();&amp;#10;        //slider._setupSlider();&amp;#10;    } catch (err) {}&amp;#10;    slider1_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;//Initialize slider 2&amp;#10;function InitializeSlider2(){&amp;#10;    try {&amp;#10;        slider2._skin.STANDARD.MARKER_COLOR = col;&amp;#10;        slider2._skin.MARKER_SIZE = [0.05, 0.05];&amp;#10;        slider2._onChange(true)();&amp;#10;        //slider2._setupSlider();&amp;#10;        slider2.draw();&amp;#10;        slider2.setAutoDraw(true);&amp;#10;    } catch (err) {}&amp;#10;    slider2_is_initialized  = true;&amp;#10;}&amp;#10;&amp;#10;//Initialize slider1 marker at 0 position&amp;#10;if (!slider1_is_initialized &amp;&amp; image_1.status === STARTED){&amp;#10;    InitializeSlider1();&amp;#10;}&amp;#10;&amp;#10;//Initialize slider2 marker at slider1 marker position&amp;#10;if (!slider2_is_initialized &amp;&amp; image_2.status === STARTED){&amp;#10;    slider2.markerPos = slider.lastrating;&amp;#10;    InitializeSlider2();&amp;#10;}&amp;#10;&amp;#10;// Compute opacities&amp;#10;if(opacity1&lt;1 &amp;&amp; !img2start){&amp;#10;    opacity1 = (timer1.getTime())/5;&amp;#10;}&amp;#10;else if(opacity2&lt;1 &amp;&amp; img2start){&amp;#10;    opacity2 = (timer2.getTime())/5;&amp;#10;}&amp;#10;&amp;#10;//Detect if we moved the marker using mouse position&amp;#10;if (startingPos1 &amp;&amp; !img2start &amp;&amp; mouse.getPressed()[0] === 1 &amp;&amp; mouse.getPos()[0] &gt;= 0.475 &amp;&amp; mouse.getPos()[0] &lt;= 0.525 &amp;&amp; mouse.getPos()[1] &gt;= -0.25 &amp;&amp; mouse.getPos()[1] &lt;= 0.25){&amp;#10;    startingPos1 = false;&amp;#10;}&amp;#10;&amp;#10;// Get keys&amp;#10;let keys = kb.getKeys({keyList: [&quot;up&quot;, &quot;down&quot;], waitRelease: false, clear: true});&amp;#10;let key_name = &quot;&quot;;&amp;#10;let key_duration = &quot;&quot;;&amp;#10;&amp;#10;function movingSlider1WArrowKeys(mySlider){&amp;#10;    if (!img2start &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos1 = false;&amp;#10;    }&amp;#10;        &amp;#10;    else if (!img2start &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos1 = false;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if (keys.length &gt; 0){&amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    movingSlider1WArrowKeys(slider);&amp;#10;}&amp;#10;    &amp;#10;// print rating next to slider before releasing the mouse&amp;#10;if (!img2start &amp;&amp; !startingPos1) {&amp;#10;    // display rating value&amp;#10;    val = Math.round(slider.markerPos)&amp;#10;    rating_val.text = val &gt;= 0 ? Math.abs(val)+txtScoreY : Math.abs(val)+txtScoreN;&amp;#10;}&amp;#10;&amp;#10;if (startingPos2 &amp;&amp; img2start &amp;&amp; mouse.getPressed()[0] === 1 &amp;&amp; mouse.getPos()[0] &gt;= 0.475 &amp;&amp; mouse.getPos()[0] &lt;= 0.525 &amp;&amp; mouse.getPos()[1] &gt;= -0.25 &amp;&amp; mouse.getPos()[1] &lt;= 0.25){&amp;#10;    startingPos2 = false;&amp;#10;    img1stop = true;&amp;#10;}&amp;#10;&amp;#10;function movingSlider2WArrowKeys(mySlider){&amp;#10;    if (img2start &amp;&amp; key_name === &quot;up&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos += 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos2 = false;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;        &amp;#10;    else if (img2start &amp;&amp; key_name === &quot;down&quot; &amp;&amp; key_duration == undefined){&amp;#10;        mySlider.markerPos -= 10;&amp;#10;        mySlider.recordRating(mySlider.markerPos);&amp;#10;        startingPos2 = false;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if (keys.length &gt; 0){&amp;#10;    key_name = keys[0].name;&amp;#10;    key_duration = keys[0].duration;&amp;#10;    movingSlider2WArrowKeys(slider2);&amp;#10;}&amp;#10;&amp;#10;//Save rating of slider_pr on img2&amp;#10;if (img2start &amp;&amp; !startingPos2) {&amp;#10;    // display rating value&amp;#10;    val = Math.round(slider2.markerPos)&amp;#10;    rating_val.text = val &gt;= 0 ? Math.abs(val)+txtScoreY : Math.abs(val)+txtScoreN;&amp;#10;}&amp;#10;&amp;#10;//Start img2 and img3&amp;#10;if (t &gt;= 5.0 &amp;&amp; image_2.status === NOT_STARTED &amp;&amp; image_1.opacity &gt;= 1) {&amp;#10;    img2start = true;&amp;#10;    //slider2.reset();&amp;#10;    slider.lastrating = slider.markerPos;&amp;#10;    timer2.reset();&amp;#10;    rating_val.text = &quot;&quot;;&amp;#10;} else {&amp;#10;    if (t &gt;= 10.0 &amp;&amp; image_3.status === NOT_STARTED &amp;&amp; image_2.opacity &gt;= 1) {&amp;#10;        img3start = true;&amp;#10;        img1stop = true;&amp;#10;    }&amp;#10;}" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// Save images times&amp;#10;psychoJS.experiment.addData('image_1.started', image_1.tStart); &amp;#10;psychoJS.experiment.addData('image_1.stopped', image_1.tStop); &amp;#10;if (slider.getRT() != null &amp;&amp; image_1.tStart != null){&amp;#10;    psychoJS.experiment.addData('image_1.rt', slider.getRT()-image_1.tStart); &amp;#10;}&amp;#10;else{&amp;#10;    psychoJS.experiment.addData('image_1.rt', ''); &amp;#10;}&amp;#10;psychoJS.experiment.addData('image_2.started', image_2.tStart); &amp;#10;psychoJS.experiment.addData('image_2.stopped', image_2.tStop); &amp;#10;if (slider2.getRT() != null &amp;&amp; image_2.tStart != null){&amp;#10;    psychoJS.experiment.addData('image_2.rt', slider2.getRT()-image_2.tStart);&amp;#10;}&amp;#10;else{&amp;#10;    psychoJS.experiment.addData('image_2.rt', ''); &amp;#10;}&amp;#10;psychoJS.experiment.addData('image_3.started', image_3.tStart); &amp;#10;psychoJS.experiment.addData('image_3.stopped', image_3.tStop);&amp;#10;&amp;#10;// Save additionals data&amp;#10;&amp;#10;//condition_type&amp;#10;condition_type = (condition[0] === condition[1]) ? 'confirm' : 'disconfirm';&amp;#10;psychoJS.experiment.addData('condition_type', condition_type);&amp;#10;&amp;#10;//response_condition&amp;#10;response_condition = (slider.getRating() == null || slider2.getRating() == null) ? '' : &amp;#10;(slider.getRating() &lt; 0 &amp;&amp; slider2.getRating() &lt;= slider.getRating()) ? 'NN' :&amp;#10;(slider.getRating() &lt; 0 &amp;&amp; slider2.getRating() &gt; slider.getRating()) ? 'NY' :&amp;#10;(slider.getRating() &gt; 0 &amp;&amp; slider2.getRating() &lt; slider.getRating()) ? 'YN' :&amp;#10;(slider.getRating() &gt; 0 &amp;&amp; slider2.getRating() &gt;= slider.getRating()) ? 'YY' : 'ERROR';&amp;#10;psychoJS.experiment.addData('response_condition', response_condition);&amp;#10;&amp;#10;// match and answered trial&amp;#10;match = (condition &amp;&amp; response_condition &amp;&amp; condition == response_condition) ? 1 :&amp;#10;(condition &amp;&amp; response_condition &amp;&amp; condition != response_condition) ? 0 : &quot;&quot;;&amp;#10;psychoJS.experiment.addData('match', match);&amp;#10;answeredTrial = (match.toString().length === 0) ? 0 : 1;&amp;#10;psychoJS.experiment.addData('answeredTrial', answeredTrial);&amp;#10;&amp;#10;// degree_change&amp;#10;degree_change = (slider.getRating() == null || slider2.getRating() == null) ? &quot;&quot; :&amp;#10;Math.abs(slider.getRating()-slider2.getRating());&amp;#10;psychoJS.experiment.addData('degree_change', degree_change);&amp;#10;&amp;#10;thisExp.addData('currentTrial', currentTrial);&amp;#10;currentTrial = currentTrial + 1;&amp;#10;&amp;#10;kb.clock.reset();&amp;#10;kb.stop();&amp;#10;kb.clearEvents();" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Save images times&amp;#10;thisExp.addData('image_1.started', image_1.tStart)&amp;#10;thisExp.addData('image_1.stopped', image_1.tStop)&amp;#10;if slider.getRT() != None and image_1.tStart != None:&amp;#10;    thisExp.addData('image_1.rt', slider.getRT()-image_1.tStart)&amp;#10;else:&amp;#10;    thisExp.addData('image_1.rt', '')&amp;#10;thisExp.addData('image_2.started', image_2.tStart)&amp;#10;thisExp.addData('image_2.stopped', image_2.tStop)&amp;#10;if slider2.getRT() != None and image_2.tStart != None:&amp;#10;    thisExp.addData('image_2.rt', slider2.getRT()-image_2.tStart)&amp;#10;else:&amp;#10;    thisExp.addData('image_2.rt', '')&amp;#10;thisExp.addData('image_3.started', image_3.tStart)&amp;#10;thisExp.addData('image_3.stopped', image_3.tStop)&amp;#10;&amp;#10;# Save additionals data&amp;#10;&amp;#10;# condition_type&amp;#10;condition_type = ''&amp;#10;&amp;#10;if condition == condition[::-1]:&amp;#10;    condition_type = 'confirm'&amp;#10;else:&amp;#10;    condition_type = 'disconfirm'&amp;#10;thisExp.addData('condition_type', condition_type)&amp;#10;&amp;#10;# response_condition&amp;#10;response_condition = ''&amp;#10;&amp;#10;if slider.getRating() is None or slider2.getRating() is None:&amp;#10;    response_condition = ''&amp;#10;elif slider.getRating() &lt; 0 and slider2.getRating() &lt;= slider.getRating():&amp;#10;    response_condition = 'NN'&amp;#10;elif slider.getRating() &lt; 0 and slider2.getRating() &gt; slider.getRating():&amp;#10;    response_condition = 'NY'&amp;#10;elif slider.getRating() &gt; 0 and slider2.getRating() &lt; slider.getRating():&amp;#10;    response_condition = 'YN'&amp;#10;elif slider.getRating() &gt; 0 and slider2.getRating() &gt;= slider.getRating():&amp;#10;    response_condition = 'YY'&amp;#10;thisExp.addData('response_condition', response_condition)&amp;#10;&amp;#10;# match and answered trial&amp;#10;match = ''&amp;#10;answeredTrial = 0&amp;#10;&amp;#10;if condition and response_condition and condition == response_condition:&amp;#10;    match = 1&amp;#10;    answeredTrial = 1&amp;#10;elif condition and response_condition and condition != response_condition:&amp;#10;    match = 0&amp;#10;    answeredTrial = 1&amp;#10;thisExp.addData('match', match)&amp;#10;thisExp.addData('answeredTrial', answeredTrial)&amp;#10;&amp;#10;# degree_change&amp;#10;degree_change = ''&amp;#10;&amp;#10;if slider.getRating() is None or slider2.getRating() is None:&amp;#10;    degree_change = ''&amp;#10;else:&amp;#10;    degree_change = abs(slider.getRating()-slider2.getRating())&amp;#10;thisExp.addData('degree_change', degree_change)&amp;#10;&amp;#10;thisExp.addData('currentTrial', currentTrial)&amp;#10;currentTrial = currentTrial + 1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img2start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_1" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_2" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_3">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="1" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="10" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img3start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$txt_3" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="image_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_1" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_1" valType="code" updates="None" name="name"/>
        <Param val="opacity1" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="6" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_2" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_2" valType="code" updates="None" name="name"/>
        <Param val="opacity2" valType="code" updates="set every frame" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="1" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$img_3" valType="str" updates="set every repeat" name="image"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.6, 0.6)" valType="list" updates="constant" name="size"/>
        <Param val="10" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img3start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <SliderComponent name="slider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider" valType="code" updates="None" name="name"/>
        <Param val="1.0" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5,0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.45)" valType="list" updates="constant" name="size"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img1stop == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <SliderComponent name="slider2">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider2" valType="code" updates="None" name="name"/>
        <Param val="1.0" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5,0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.05, 0.45)" valType="list" updates="constant" name="size"/>
        <Param val="5" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$img2start == 1" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-100, 0, 100)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <TextComponent name="label1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5, 0.266)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% YES" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="label2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="label2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0.5, -0.266)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="100% NO" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="rating_val">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="10" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.035" valType="code" updates="constant" name="letterHeight"/>
        <Param val="rating_val" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="preview_pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="extendedStr" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse">
        <Param val="slider, slider2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="every frame" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="$img3start == 1" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="thanks">
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;//Change the text according to the selected language, function SetTxtThx()&amp;#10;function SetTxtThx(){&amp;#10;    if (english){&amp;#10;        thx.text = &quot;Thank you for your participation!&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        thx.text = &quot;Merci de votre participation!&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;// Compute additional scores, save them to the data file and send them to Redcap &amp;#10;function GetData(){&amp;#10;    try{&amp;#10;        let data = thisExp._trialsData;&amp;#10;        &amp;#10;        /* Make array objects all have the same keys */&amp;#10;        let defaults = { &quot;Language&quot; : &quot;&quot;, &quot;participant&quot; : &quot;&quot;, &quot;date&quot; : &quot;&quot;, &quot;session&quot;: &quot;&quot;, &quot;expName:&quot;:&quot;&quot;, &amp;#10;        &quot;psychopyVersion&quot;: &quot;&quot;, &quot;OS&quot;: &quot;&quot;, &quot;frameRate&quot;: &quot;&quot;, &quot;slider.response&quot;: &quot;&quot;, &quot;slider.rt&quot;: &quot;&quot;, &amp;#10;        &quot;slider2.response&quot;: &quot;&quot;, &quot;slider2.rt&quot;: &quot;&quot;, &quot;mouse_i.x&quot;: &quot;&quot;, &quot;mouse_i.y&quot;: &quot;&quot;, &quot;mouse_i.leftButton&quot;: &quot;&quot;,&amp;#10;        &quot;mouse_i.midButton&quot;: &quot;&quot;, &quot;mouse_i.rightButton&quot;: &quot;&quot;, &quot;mouse_i.time&quot;: &quot;&quot;, &quot;mouse_i.clicked_name&quot;: &quot;&quot;,&amp;#10;        &quot;mouse_i2.x&quot;: &quot;&quot;, &quot;mouse_i2.y&quot;: &quot;&quot;, &quot;mouse_i2.leftButton&quot;: &quot;&quot;, &quot;mouse_i2.midButton&quot;: &quot;&quot;,&amp;#10;        &quot;mouse_i2.rightButton&quot;: &quot;&quot;, &quot;mouse_i2.time&quot;: &quot;&quot;, &quot;mouse_i2.clicked_name&quot;: &quot;&quot;,&quot;slider_pr.response&quot;: &quot;&quot;,&amp;#10;        &quot;slider_pr.rt&quot;: &quot;&quot;, &quot;slider_pr.history&quot;: &quot;&quot;, &quot;slider_pr2.response&quot;: &quot;&quot;, &quot;slider_pr2.rt&quot;: &quot;&quot;, &amp;#10;        &quot;slider_pr2.history&quot;: &quot;&quot;, &quot;mouse_pr.x&quot;: &quot;&quot;, &quot;mouse_pr.y&quot;: &quot;&quot;, &quot;mouse_pr.leftButton&quot;: &quot;&quot;,&amp;#10;        &quot;mouse_pr.midButton&quot;: &quot;&quot;, &quot;mouse_pr.rightButton&quot;: &quot;&quot;, &quot;mouse_pr.time&quot;: &quot;&quot;, &quot;mouse_pr.clicked_name&quot;: &quot;&quot;,&amp;#10;        &quot;image_1.started&quot;: &quot;&quot;,&quot;image_1.stopped&quot;: &quot;&quot;, &quot;image_1.rt&quot;: &quot;&quot;,&quot;image_2.started&quot;: &quot;&quot;,&amp;#10;        &quot;image_2.stopped&quot;: &quot;&quot;, &quot;image_2.rt&quot;: &quot;&quot;, &quot;image_3.started&quot;: &quot;&quot;, &quot;image_3.stopped&quot;: &quot;&quot;,&amp;#10;        &quot;condition_type&quot;: &quot;&quot;, &quot;response_condition&quot;: &quot;&quot;, &quot;match&quot;: &quot;&quot;, &quot;answeredTrial&quot;: &quot;&quot;, &quot;degree_change&quot;: &quot;&quot;,&amp;#10;        &quot;currentTrial&quot;: &quot;&quot;, &quot;mouse.x&quot;: &quot;&quot;, &quot;mouse.y&quot;: &quot;&quot;, &quot;mouse.leftButton&quot;: &quot;&quot;, &quot;mouse.midButton&quot;: &quot;&quot;,&amp;#10;        &quot;mouse.rightButton&quot;: &quot;&quot;, &quot;mouse.time&quot;: &quot;&quot;, &quot;mouse.clicked_name&quot;: &quot;&quot;, &amp;#10;        &quot;slider.history&quot;: &quot;&quot;, &quot;slider2.history&quot;: &quot;&quot;};&amp;#10;        &amp;#10;        data = $.map( data, function( item ){&amp;#10;            return $.extend( {}, defaults, item ); &amp;#10;        });&amp;#10;        &amp;#10;        // Rename &quot;index&quot; key to avoid errors&amp;#10;        data = data.map(elem =&gt; {&amp;#10;            elem.given_index = elem.index;&amp;#10;            delete elem.index;&amp;#10;            return elem;&amp;#10;        });&amp;#10;        &amp;#10;        // Create all the variables we will need&amp;#10;        let data2 = [&quot;percent_trials_considered&quot;, &quot;acc_confirm&quot;, &quot;acc_disconfirm&quot;, &quot;total_acc&quot;, &amp;#10;        &quot;ratingchg_correctC&quot;, &quot;ratingchg_correctD&quot;, &quot;ratingchg_incorrectC&quot;,&amp;#10;        &quot;ratingchg_incorrectD&quot;,&quot;total_ratingchg&quot;, &quot;rt_correctC&quot;, &quot;rt_correctD&quot;,&amp;#10;        &quot;rt_incorrectC&quot;,&quot;rt_incorrectD&quot;, &quot;total_rt&quot;];&amp;#10;        &amp;#10;        for (let i = 0; i &lt; data2.length; i++) {&amp;#10;            data[data2[i]] = &quot;&quot;;&amp;#10;        }&amp;#10;        &amp;#10;        // Create our dataframe where we will compute all the values&amp;#10;        &amp;#10;        let df1 = new dfd.DataFrame(data);&amp;#10;        &amp;#10;        // Count rows where match or deg change is empty so we can compute the pourcentage of trials answered&amp;#10;        let df1_answered_trials = df1.loc({&amp;#10;            rows: df1[&quot;answeredTrial&quot;].eq(1)&amp;#10;        });&amp;#10;        &amp;#10;        let df1_not_answered_trials = df1.loc({&amp;#10;            rows: df1[&quot;answeredTrial&quot;].eq(0)&amp;#10;        });&amp;#10;        &amp;#10;        let nb_answered_trials = df1_answered_trials.$data.length;&amp;#10;        let nb_trials = nb_answered_trials+df1_not_answered_trials.$data.length;&amp;#10;        &amp;#10;        // Remove rows where match or deg change is empty so that it won't perturn means&amp;#10;        df1 = df1.loc({&amp;#10;            rows: df1[&quot;answeredTrial&quot;].eq(1)&amp;#10;        });&amp;#10;        df1.resetIndex({ inplace: true });&amp;#10;        &amp;#10;        // We will compute the scores&amp;#10;        &amp;#10;        let sub_df_confirm = df1.loc({&amp;#10;            rows: df1[&quot;condition_type&quot;].eq(&quot;confirm&quot;)&amp;#10;        });&amp;#10;        &amp;#10;        let sub_df_disconfirm = df1.loc({&amp;#10;            rows: df1[&quot;condition_type&quot;].eq(&quot;disconfirm&quot;)&amp;#10;        });&amp;#10;        &amp;#10;        let sub_df_confirm_match, sub_df_confirm_nomatch, sub_df_disconfirm_match, sub_df_disconfirm_nomatch;&amp;#10;        sub_df_confirm_match = sub_df_confirm_nomatch = sub_df_disconfirm_match = sub_df_disconfirm_nomatch = new dfd.DataFrame([]);&amp;#10;        &amp;#10;        // If we have confirm and disconfirm trials&amp;#10;        if (sub_df_confirm.size&gt;0){&amp;#10;            sub_df_confirm_match = sub_df_confirm.loc({&amp;#10;                rows: sub_df_confirm[&quot;match&quot;].eq(1)&amp;#10;            });&amp;#10;            &amp;#10;            sub_df_confirm_nomatch = sub_df_confirm.loc({&amp;#10;                rows: sub_df_confirm[&quot;match&quot;].eq(0)&amp;#10;            });&amp;#10;        }&amp;#10;        if (sub_df_disconfirm.size&gt;0){&amp;#10;            sub_df_disconfirm_match = sub_df_disconfirm.loc({&amp;#10;                rows: sub_df_disconfirm[&quot;match&quot;].eq(1)&amp;#10;            });&amp;#10;            sub_df_disconfirm_nomatch = sub_df_disconfirm.loc({&amp;#10;                rows: sub_df_disconfirm[&quot;match&quot;].eq(0)&amp;#10;            });&amp;#10;        }&amp;#10;        &amp;#10;        &amp;#10;        // Compute means only when it is possible and we don't have empty values (no matches found or no degree changes)&amp;#10;        df1[&quot;percent_trials_considered&quot;] = (nb_answered_trials/nb_trials)*100;&amp;#10;        df1[&quot;acc_confirm&quot;] = (sub_df_confirm[&quot;match&quot;] == null || sub_df_confirm[&quot;match&quot;].$data.length == 0) ? &quot;&quot; : sub_df_confirm[&quot;match&quot;].mean();&amp;#10;        df1[&quot;acc_disconfirm&quot;] = (sub_df_disconfirm[&quot;match&quot;] == null || sub_df_disconfirm[&quot;match&quot;].$data.length == 0) ? &quot;&quot; : sub_df_disconfirm[&quot;match&quot;].mean();&amp;#10;        df1[&quot;total_acc&quot;] = (df1[&quot;match&quot;] == null || df1[&quot;match&quot;].$data.length == 0) ? &quot;&quot; : df1[&quot;match&quot;].mean();&amp;#10;        df1[&quot;ratingchg_correctC&quot;] = (sub_df_confirm_match[&quot;degree_change&quot;] == null || sub_df_confirm_match[&quot;degree_change&quot;].$data.length == 0) ? &quot;&quot; : sub_df_confirm_match[&quot;degree_change&quot;].mean();&amp;#10;        df1[&quot;ratingchg_correctD&quot;] = (sub_df_disconfirm_match[&quot;degree_change&quot;] == null || sub_df_disconfirm_match[&quot;degree_change&quot;].$data.length == 0) ? &quot;&quot; : sub_df_disconfirm_match[&quot;degree_change&quot;].mean();&amp;#10;        df1[&quot;ratingchg_incorrectC&quot;] = (sub_df_confirm_nomatch[&quot;degree_change&quot;] == null || sub_df_confirm_nomatch[&quot;degree_change&quot;].$data.length == 0) ? &quot;&quot; : sub_df_confirm_nomatch[&quot;degree_change&quot;].mean();&amp;#10;        df1[&quot;ratingchg_incorrectD&quot;] = (sub_df_disconfirm_nomatch[&quot;degree_change&quot;] == null || sub_df_disconfirm_nomatch[&quot;degree_change&quot;].$data.length == 0) ? &quot;&quot; : sub_df_disconfirm_nomatch[&quot;degree_change&quot;].mean();&amp;#10;        df1[&quot;total_ratingchg&quot;] = (df1[&quot;degree_change&quot;] == null || df1[&quot;degree_change&quot;].$data.length == 0) ? &quot;&quot; : df1[&quot;degree_change&quot;].mean();&amp;#10;        df1[&quot;rt_correctC&quot;] = (sub_df_confirm_match[&quot;slider2.rt&quot;] == null || sub_df_confirm_match[&quot;slider2.rt&quot;].$data.length == 0) ? &quot;&quot; : sub_df_confirm_match[&quot;slider2.rt&quot;].mean();&amp;#10;        df1[&quot;rt_correctD&quot;] = (sub_df_disconfirm_match[&quot;slider2.rt&quot;] == null || sub_df_disconfirm_match[&quot;slider2.rt&quot;].$data.length == 0) ? &quot;&quot; : sub_df_disconfirm_match[&quot;slider2.rt&quot;].mean();&amp;#10;        df1[&quot;rt_incorrectC&quot;] = (sub_df_confirm_nomatch[&quot;slider2.rt&quot;] == null || sub_df_confirm_nomatch[&quot;slider2.rt&quot;].$data.length == 0) ? &quot;&quot; : sub_df_confirm_nomatch[&quot;slider2.rt&quot;].mean();&amp;#10;        df1[&quot;rt_incorrectD&quot;] = (sub_df_disconfirm_nomatch[&quot;slider2.rt&quot;] == null || sub_df_disconfirm_nomatch[&quot;slider2.rt&quot;].$data.length == 0) ? &quot;&quot; : sub_df_disconfirm_nomatch[&quot;slider2.rt&quot;].mean();&amp;#10;        df1[&quot;total_rt&quot;] = (df1[&quot;slider2.rt&quot;] == null || df1[&quot;slider2.rt&quot;].$data.length == 0) ? &quot;&quot; : df1[&quot;slider2.rt&quot;].mean();&amp;#10;        &amp;#10;        //df1.print();&amp;#10;        //console.log(&quot;new dataframe: &quot;, df1);&amp;#10;        &amp;#10;        let taskVersion = &quot;Online_v3.0.3&quot;; // Version of the task&amp;#10;        &amp;#10;        const exp_name = &quot;BADE_images&quot;;&amp;#10;        &amp;#10;        df1[&quot;date_exp&quot;] = startingDate;&amp;#10;        df1[&quot;task_version&quot;] = taskVersion;&amp;#10;        &amp;#10;        // Save dataframe inside the logfile&amp;#10;        psychoJS.experiment.addData('date_exp', df1[&quot;date_exp&quot;]);&amp;#10;        psychoJS.experiment.addData('task_version', df1[&quot;task_version&quot;]);&amp;#10;        psychoJS.experiment.addData('percent_trials_considered', df1[&quot;percent_trials_considered&quot;]);&amp;#10;        psychoJS.experiment.addData('acc_confirm', df1[&quot;acc_confirm&quot;]);&amp;#10;        psychoJS.experiment.addData('acc_disconfirm', df1[&quot;acc_disconfirm&quot;]);&amp;#10;        psychoJS.experiment.addData('total_acc', df1[&quot;total_acc&quot;]);&amp;#10;        psychoJS.experiment.addData('ratingchg_correctC', df1[&quot;ratingchg_correctC&quot;]);&amp;#10;        psychoJS.experiment.addData('ratingchg_correctD', df1[&quot;ratingchg_correctD&quot;]);&amp;#10;        psychoJS.experiment.addData('ratingchg_incorrectC', df1[&quot;ratingchg_incorrectC&quot;]);&amp;#10;        psychoJS.experiment.addData('ratingchg_incorrectD', df1[&quot;ratingchg_incorrectD&quot;]);&amp;#10;        psychoJS.experiment.addData('total_ratingchg', df1[&quot;total_ratingchg&quot;]);&amp;#10;        psychoJS.experiment.addData('rt_correctC', df1[&quot;rt_correctC&quot;]);&amp;#10;        psychoJS.experiment.addData('rt_correctD', df1[&quot;rt_correctD&quot;]);&amp;#10;        psychoJS.experiment.addData('rt_incorrectC', df1[&quot;rt_incorrectC&quot;]);&amp;#10;        psychoJS.experiment.addData('rt_incorrectD', df1[&quot;rt_incorrectD&quot;]);&amp;#10;        psychoJS.experiment.addData('total_rt', df1[&quot;total_rt&quot;]);&amp;#10;        &amp;#10;        return df1;&amp;#10;    }&amp;#10;    catch(err) {&amp;#10;      console.log(&quot;Error while computing the scores.&quot;);&amp;#10;      dumpError(err);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function REDCapImportRecord(df1) {&amp;#10;    try{&amp;#10;      const url = 'https://portal.rimuhc.ca/cim/redcap/api/';&amp;#10;      let testdata;&amp;#10;      // Warning: If we add or remove columns in the Google file, we must also change the variables here&amp;#10;      testdata = [{&amp;#10;                record_id: df1.loc({rows: [0], columns: [&quot;participant&quot;]}).values[0][0],&amp;#10;                [redcapVars[1]]: df1.loc({rows: [0], columns: [&quot;session&quot;]}).values[0][0],&amp;#10;                [redcapVars[2]]: df1[&quot;date_exp&quot;],&amp;#10;                [redcapVars[3]]: df1[&quot;task_version&quot;],&amp;#10;                [redcapVars[4]]: df1[&quot;percent_trials_considered&quot;],&amp;#10;                [redcapVars[5]]: df1[&quot;acc_confirm&quot;],&amp;#10;                [redcapVars[6]]: df1[&quot;acc_disconfirm&quot;],&amp;#10;                [redcapVars[7]]: df1[&quot;total_acc&quot;],&amp;#10;                [redcapVars[8]]: df1[&quot;ratingchg_correctC&quot;],&amp;#10;                [redcapVars[9]]: df1[&quot;ratingchg_correctD&quot;],&amp;#10;                [redcapVars[10]]: df1[&quot;ratingchg_incorrectC&quot;],&amp;#10;                [redcapVars[11]]: df1[&quot;ratingchg_incorrectD&quot;],&amp;#10;                [redcapVars[12]]: df1[&quot;total_ratingchg&quot;],&amp;#10;                [redcapVars[13]]: df1[&quot;rt_correctC&quot;],&amp;#10;                [redcapVars[14]]: df1[&quot;rt_correctD&quot;],&amp;#10;                [redcapVars[15]]: df1[&quot;rt_incorrectC&quot;],&amp;#10;                [redcapVars[16]]: df1[&quot;rt_incorrectD&quot;],&amp;#10;                [redcapVars[17]]: df1[&quot;total_rt&quot;]&amp;#10;      }];&amp;#10;      &amp;#10;      testdata = JSON.stringify(testdata);&amp;#10;      //console.log(&quot;testdata: &quot;, testdata);&amp;#10;&amp;#10;      const body = new FormData();&amp;#10;      body.append('token', redcapVars[0]);&amp;#10;      body.append('content', 'record');&amp;#10;      body.append('format', 'json');&amp;#10;      body.append('overwriteBehavior', 'normal');&amp;#10;      body.append('data', testdata);&amp;#10;      body.append('returnContent', 'ids');&amp;#10;&amp;#10;      const params = {&amp;#10;        method: 'POST',&amp;#10;        body,&amp;#10;      }&amp;#10;&amp;#10;    return fetch(url, params)&amp;#10;      .then(data =&gt; {&amp;#10;        console.log('fetch data: ', data)&amp;#10;      })&amp;#10;      .catch(error =&gt; console.log('Error: ', error))&amp;#10; &amp;#10;    }&amp;#10;    catch(err) {&amp;#10;      console.log(&quot;Error while sending data to redcap: &quot;, err.message);&amp;#10;      dumpError(err);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;function dumpError(err) {&amp;#10;  if (typeof err === 'object') {&amp;#10;    if (err.message) {&amp;#10;      console.log('\nMessage: ' + err.message);&amp;#10;    }&amp;#10;    if (err.stack) {&amp;#10;      console.log('\nStacktrace:');&amp;#10;      console.log('====================');&amp;#10;      console.log(err.stack);&amp;#10;    }&amp;#10;  } else {&amp;#10;    console.log('dumpError :: argument is not an object');&amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;//Call functions&amp;#10;SetTxtThx();&amp;#10;var res = GetData();&amp;#10;REDCapImportRecord(res);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import traceback&amp;#10;&amp;#10;#Change the text according to the selected language, function SetTxtInstr2()&amp;#10;if english:&amp;#10;    thx.text = &quot;Thank you for your participation!&quot;&amp;#10;else:&amp;#10;    thx.text = &quot;Merci de votre participation!&quot;&amp;#10;    &amp;#10;# DATA COMPUTATIONS&amp;#10;#Get Data&amp;#10;try:&amp;#10;    df1 = pd.DataFrame.from_dict(thisExp.getAllEntries())&amp;#10;&amp;#10;    # Create all the variables we will need&amp;#10;    df1 = df1.assign(percent_trials_considered=&quot;&quot;,acc_confirm=&quot;&quot;,acc_disconfirm=&quot;&quot;,total_acc=&quot;&quot;,ratingchg_correctC=&quot;&quot;,ratingchg_correctD=&quot;&quot;,ratingchg_incorrectC=&quot;&quot;,ratingchg_incorrectD=&quot;&quot;,total_ratingchg=&quot;&quot;,rt_correctC=&quot;&quot;,rt_correctD=&quot;&quot;,rt_incorrectC=&quot;&quot;,rt_incorrectD=&quot;&quot;,total_rt=&quot;&quot;)&amp;#10;    &amp;#10;    #print(&quot;df1&quot;, df1)&amp;#10;    #print(&quot;df1 shape: &quot;, df1.shape)&amp;#10;&amp;#10;    # Compute the number of answered trials&amp;#10;    nb_answered_trials = len(df1.query('answeredTrial == 1'))&amp;#10;    nb_not_answered_trials = len(df1.query('answeredTrial == 0'))&amp;#10;    nb_trials = nb_answered_trials+nb_not_answered_trials&amp;#10;&amp;#10;    # Select only answered trials so that it won't perturn means&amp;#10;    df1 = df1.query('answeredTrial == 1')&amp;#10;    df1.reset_index(drop=True, inplace=True) #indexing was a concern in some calculations.&amp;#10;&amp;#10;    #We will now compute the scores&amp;#10;    df1[&quot;percent_trials_considered&quot;] = (nb_answered_trials/nb_trials)*100&amp;#10;    df1[&quot;acc_confirm&quot;] = df1.query('condition_type == &quot;confirm&quot;')['match'].mean()&amp;#10;    df1[&quot;acc_disconfirm&quot;] = df1.query('condition_type == &quot;disconfirm&quot;')['match'].mean()&amp;#10;    df1[&quot;total_acc&quot;] = df1['match'].mean()&amp;#10;    df1[&quot;ratingchg_correctC&quot;] = df1.query('condition_type == &quot;confirm&quot; &amp; match == 1')['degree_change'].mean()&amp;#10;    df1[&quot;ratingchg_correctD&quot;] = df1.query('condition_type == &quot;disconfirm&quot; &amp; match == 1')['degree_change'].mean()&amp;#10;    df1[&quot;ratingchg_incorrectC&quot;] = df1.query('condition_type == &quot;confirm&quot; &amp; match == 0')['degree_change'].mean()&amp;#10;    df1[&quot;ratingchg_incorrectD&quot;] = df1.query('condition_type == &quot;disconfirm&quot; &amp; match == 0')['degree_change'].mean()&amp;#10;    df1[&quot;total_ratingchg&quot;] = df1['degree_change'].mean()&amp;#10;    df1[&quot;rt_correctC&quot;] = df1.query('condition_type == &quot;confirm&quot; &amp; match == 1')['slider2.rt'].mean()&amp;#10;    df1[&quot;rt_correctD&quot;] = df1.query('condition_type == &quot;disconfirm&quot; &amp; match == 1')['slider2.rt'].mean()&amp;#10;    df1[&quot;rt_incorrectC&quot;] = df1.query('condition_type == &quot;confirm&quot; &amp; match == 0')['slider2.rt'].mean()&amp;#10;    df1[&quot;rt_incorrectD&quot;] = df1.query('condition_type == &quot;disconfirm&quot; &amp; match == 0')['slider2.rt'].mean()&amp;#10;    df1[&quot;total_rt&quot;] = df1['slider2.rt'].mean()&amp;#10;&amp;#10;    # If we could not compute mean because we had empty values (no matches found or no degree changes) then we may have nan results&amp;#10;    # Replace nan results by empty string&amp;#10;    df1 = df1.fillna('')&amp;#10;&amp;#10;    #print(&quot;df1&quot;, df1)&amp;#10;    #print(&quot;df1 shape: &quot;, df1.shape)&amp;#10;&amp;#10;    # Save task version and date&amp;#10;    taskVersion = &quot;Offline_v3.0.3&quot;&amp;#10;    df1[&quot;date_exp&quot;] = startingDate&amp;#10;    df1[&quot;task_version&quot;] = taskVersion&amp;#10;&amp;#10;    thisExp.addData('date_exp', df1[&quot;date_exp&quot;].iloc[0])&amp;#10;    thisExp.addData('task_version', df1[&quot;task_version&quot;].iloc[0])&amp;#10;    thisExp.addData('percent_trials_considered', df1[&quot;percent_trials_considered&quot;].iloc[0])&amp;#10;    thisExp.addData('acc_confirm', df1[&quot;acc_confirm&quot;].iloc[0])&amp;#10;    thisExp.addData('acc_disconfirm', df1[&quot;acc_disconfirm&quot;].iloc[0])&amp;#10;    thisExp.addData('total_acc', df1[&quot;total_acc&quot;].iloc[0])&amp;#10;    thisExp.addData('ratingchg_correctC', df1[&quot;ratingchg_correctC&quot;].iloc[0])&amp;#10;    thisExp.addData('ratingchg_correctD', df1[&quot;ratingchg_correctD&quot;].iloc[0])&amp;#10;    thisExp.addData('ratingchg_incorrectC', df1[&quot;ratingchg_incorrectC&quot;].iloc[0])&amp;#10;    thisExp.addData('ratingchg_incorrectD', df1[&quot;ratingchg_incorrectD&quot;].iloc[0])&amp;#10;    thisExp.addData('total_ratingchg', df1[&quot;total_ratingchg&quot;].iloc[0])&amp;#10;    thisExp.addData('rt_correctC', df1[&quot;rt_correctC&quot;].iloc[0])&amp;#10;    thisExp.addData('rt_correctD', df1[&quot;rt_correctD&quot;].iloc[0])&amp;#10;    thisExp.addData('rt_incorrectC', df1[&quot;rt_incorrectC&quot;].iloc[0])&amp;#10;    thisExp.addData('rt_incorrectD', df1[&quot;rt_incorrectD&quot;].iloc[0])&amp;#10;    thisExp.addData('total_rt', df1[&quot;total_rt&quot;].iloc[0])&amp;#10;except Exception:&amp;#10;    print(&quot;An exception occurred. Error while computing scores.&quot;)&amp;#10;    traceback.print_exc()&amp;#10;    &amp;#10;# Send data to redcap&amp;#10;try:&amp;#10;    import requests, hashlib&amp;#10;    # Transform data to JSON Format&amp;#10;    # If we add or remove columns in the Google file, we must also change the variables here&amp;#10;    myDict = {}&amp;#10;    myDict[&quot;record_id&quot;] = df1['participant'].iloc[0]&amp;#10;    myDict[redcapVars[1]] = df1['session'].iloc[0]&amp;#10;    myDict[redcapVars[2]] = df1['date_exp'].iloc[0]&amp;#10;    myDict[redcapVars[3]] = df1['task_version'].iloc[0]&amp;#10;    myDict[redcapVars[4]] = df1['percent_trials_considered'].iloc[0]&amp;#10;    myDict[redcapVars[5]] = df1['acc_confirm'].iloc[0]&amp;#10;    myDict[redcapVars[6]] = df1['acc_disconfirm'].iloc[0]&amp;#10;    myDict[redcapVars[7]] = df1['total_acc'].iloc[0]&amp;#10;    myDict[redcapVars[8]] = df1['ratingchg_correctC'].iloc[0]&amp;#10;    myDict[redcapVars[9]] = df1['ratingchg_correctD'].iloc[0]&amp;#10;    myDict[redcapVars[10]] = df1['ratingchg_incorrectC'].iloc[0]&amp;#10;    myDict[redcapVars[11]] = df1['ratingchg_incorrectD'].iloc[0]&amp;#10;    myDict[redcapVars[12]] = df1['total_ratingchg'].iloc[0]&amp;#10;    myDict[redcapVars[13]] = df1['rt_correctC'].iloc[0]&amp;#10;    myDict[redcapVars[14]] = df1['rt_correctD'].iloc[0]&amp;#10;    myDict[redcapVars[15]] = df1['rt_incorrectC'].iloc[0]&amp;#10;    myDict[redcapVars[16]] = df1['rt_incorrectD'].iloc[0]&amp;#10;    myDict[redcapVars[17]] = df1['total_rt'].iloc[0]&amp;#10;    &amp;#10;    data_to_send = [myDict]&amp;#10;    &amp;#10;    #print(&quot;data to send: &quot;, data_to_send)&amp;#10;    &amp;#10;    url = 'https://portal.rimuhc.ca/cim/redcap/api/'&amp;#10;    redcap_data = {&amp;#10;        'token': redcapVars[0],&amp;#10;        'content': 'record',&amp;#10;        'format': 'json',&amp;#10;        'type': 'flat',&amp;#10;        'overwriteBehavior': 'normal',&amp;#10;        'forceAutoNumber': 'false',&amp;#10;        'data': json.dumps(data_to_send),&amp;#10;        'returnContent': 'ids',&amp;#10;        'returnFormat': 'json',&amp;#10;        'record_id': hashlib.sha1().hexdigest()[:17]&amp;#10;    }&amp;#10;    x = requests.post(url, data = redcap_data)&amp;#10;    print(x.text)&amp;#10;    print(&quot;data sent to redcap&quot;)&amp;#10;except Exception:&amp;#10;    print(&quot;An exception occurred. Error while sending data to redcap.&quot;)&amp;#10;    traceback.print_exc()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="thx">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="thx" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for your participation!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ready">
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//Change the text according to the selected language, function SetTxtInstr2()&amp;#10;function SetTxtReady(){&amp;#10;    if (english){&amp;#10;        ready_2.text = &quot;Ready to begin?&quot;;&amp;#10;        txt_next_3.text = &quot;BEGIN&quot;;&amp;#10;    }&amp;#10;    else{&amp;#10;        ready_2.text = &quot;Prêt à commencer ?&quot;;&amp;#10;        txt_next_3.text = &quot;COMMENCER&quot;;&amp;#10;    }&amp;#10;}&amp;#10;SetTxtReady();&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#Change the text according to the selected language, function SetTxtInstr2()&amp;#10;if english:&amp;#10;    ready_2.text = &quot;Ready to begin?&quot;&amp;#10;    txt_next_3.text = &quot;BEGIN&quot;&amp;#10;else:&amp;#10;    ready_2.text = &quot;Prêt à commencer ?&quot;&amp;#10;    txt_next_3.text = &quot;COMMENCER&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Change the color of highlighed rect&amp;#10;if next_3.contains(mouse_3):&amp;#10;        next_3.opacity=0.99&amp;#10;        txt_next_3.opacity=2&amp;#10;else:&amp;#10;        next_3.opacity=0.73&amp;#10;        txt_next_3.opacity=0.73" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, txt_rec1, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(next_3, txt_next_3, mouse_3);" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="ready_2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="2" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="code" updates="constant" name="letterHeight"/>
        <Param val="ready_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Ready to begin?" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="next_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="next_3" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.12)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_next_3">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_next_3" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="next_3.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="BEGIN" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_3">
        <Param val="next_3" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="lang">
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="/* &amp;#10;Use danfos to convert the data into dataframe&amp;#10;We will be able to make calculations on the data more easily&amp;#10;and in a clearer way for a future reading of the code.&amp;#10;The calculations are also similar to those with Python and Pandas,&amp;#10;so it is less work.&amp;#10;*/&amp;#10;&amp;#10;var danfosUrl = 'resources/bundle.min.js';&amp;#10;&amp;#10;function dynamicallyLoadScript(url) {&amp;#10;    var script = document.createElement(&quot;script&quot;);  // create a script DOM node&amp;#10;    script.src = url;  // set its src to the provided URL&amp;#10;&amp;#10;    document.head.appendChild(script);  // add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)&amp;#10;}&amp;#10;&amp;#10;dynamicallyLoadScript(danfosUrl);" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import re&amp;#10;import pandas as pd&amp;#10;import os, ssl&amp;#10;import json&amp;#10;import datetime&amp;#10;&amp;#10;#Initialize starting date&amp;#10;startingDate = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M&quot;)&amp;#10;&amp;#10;#Initialize variables to change the color of highlighed rect&amp;#10;red = &quot;red&quot;;&amp;#10;&amp;#10;#Set french or english variable to true when the language is selected&amp;#10;french = False&amp;#10;english = False&amp;#10;&amp;#10;trialConditions = &quot;&quot;&amp;#10;practiceConditions = &quot;&quot;&amp;#10;redcapVars = []&amp;#10;&amp;#10;#Remove illegal characters in participants' name to avoid errors in filenames&amp;#10;expInfo['participant'] = re.sub('[^\w_.)( -]', '', expInfo['participant'])&amp;#10;&amp;#10;#Load redcap variable&amp;#10;if not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):&amp;#10;    try:&amp;#10;        ssl._create_default_https_context = ssl._create_unverified_context&amp;#10;        sheet_url = &quot;https://docs.google.com/spreadsheets/d/1HKhUnueu7nKidtb37oh2HPwGXNgj5b4i6DsxrUrUOCM/edit#gid=489716065&quot;&amp;#10;        url_1 = sheet_url.replace('/edit#gid=', '/export?format=csv&amp;gid=')&amp;#10;        dfRed = pd.read_csv(url_1)&amp;#10;        nbCol = 19 #Change it if we change the google sheet&amp;#10;        for i in range(1, nbCol):&amp;#10;            redcapVars.append(dfRed.iloc[0,i])&amp;#10;    except:&amp;#10;        print(&quot;An exception occurred. The redcap variables could not be found.&quot;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;// Initialize starting date&amp;#10;date1 = new Date().toLocaleString(&quot;en-US&quot;, {timeZone: &quot;America/New_York&quot;});&amp;#10;d = new Date(date1);&amp;#10;startingDate =  d.getFullYear() + &quot;-&quot; + (d.getMonth()+1) + &quot;-&quot; + d.getDate() + &quot; &quot; +&amp;#10;d.getHours() + &quot;:&quot; + d.getMinutes();&amp;#10;&amp;#10;//Initialize variables to change the color of highlighed rect&amp;#10;red = new util.Color(&quot;red&quot;);&amp;#10;&amp;#10;//Set french or english variable to true when the language is selected&amp;#10;french = false;&amp;#10;english = false;&amp;#10;&amp;#10;trialConditions = &quot;&quot;;&amp;#10;practiceConditions = &quot;&quot;;&amp;#10;redcapVars = [];&amp;#10;&amp;#10;//Remove illegal characters in participants' name to avoid errors in filenames&amp;#10;function CheckFilename(){&amp;#10;   expInfo['participant']= expInfo['participant'].replace(/([^.a-z0-9]+)/gi, '-');&amp;#10;}&amp;#10;&amp;#10;// Load redcap variables from Google Spreadsheet&amp;#10;function LoadRedcapVars(redcapVars){&amp;#10;    try {&amp;#10;        // Retrieve data between B2 and max range&amp;#10;        let url = &quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vR2HrrKB78yxkxRABtTlghA1reADPaQN32V5oJ2BbRXEZOhr8YrkGDZaIVZtjqNMXWTLzeG6-xRaEBl/pub?gid=489716065&amp;range=B2:AA2&amp;output=csv&quot;;&amp;#10;        var xmlhttp = new XMLHttpRequest();&amp;#10;        xmlhttp.onreadystatechange = function () {&amp;#10;            if (xmlhttp.readyState == 4) {&amp;#10;                let array = xmlhttp.responseText.split(',');&amp;#10;                for (let i = 0; i &lt; array.length; i++) {&amp;#10;                    redcapVars.push(array[i]);&amp;#10;                }&amp;#10;            }&amp;#10;        };&amp;#10;        xmlhttp.open(&quot;GET&quot;, url, true);&amp;#10;        xmlhttp.send(null);&amp;#10;        return redcapVars;&amp;#10;    }&amp;#10;    catch(err) {&amp;#10;        console.log(&quot;Erreur while loading Redcap variables&quot;, err.message);&amp;#10;    }&amp;#10;    &amp;#10;}&amp;#10;&amp;#10;CheckFilename();&amp;#10;redcapVars = LoadRedcapVars(redcapVars);" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="#Change the color of highlighed rect&amp;#10;if rect1.contains(mouse1):&amp;#10;    rect1.setOpacity(0.99)&amp;#10;    txt_rect1.setOpacity(2)&amp;#10;else:&amp;#10;    rect1.setOpacity(0.73)&amp;#10;    txt_rect1.setOpacity(0.73)&amp;#10;    &amp;#10;if rect2.contains(mouse1):&amp;#10;    rect2.setOpacity(0.99)&amp;#10;    txt_rect2.setOpacity(2)&amp;#10;else:&amp;#10;    rect2.setOpacity(0.73)&amp;#10;    txt_rect2.setOpacity(0.73)&amp;#10;    &amp;#10;#Function that is going to set the chosen language&amp;#10;if rect1.contains(mouse1) and mouse1.getPressed()[0] == True:&amp;#10;        french = True&amp;#10;        practiceConditions = &quot;BADEImgConditions_practice_Fr.csv&quot;&amp;#10;        trialConditions = &quot;BADEImgConditions_Fr.csv&quot;&amp;#10;&amp;#10;elif rect2.contains(mouse1) and mouse1.getPressed()[0] == True:&amp;#10;        english = True&amp;#10;        practiceConditions = &quot;BADEImgConditions_practice_Eng.csv&quot;&amp;#10;        trialConditions = &quot;BADEImgConditions_Eng.csv&quot;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="//Change the color of highlighed rect&amp;#10;function HighlightRect(rec1, rec2, txt_rec1, txt_rec2, mouse) {&amp;#10;     if (rec1.contains(mouse)) {&amp;#10;        rec1.setOpacity(0.99);&amp;#10;        txt_rec1.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec1.setOpacity(0.73);&amp;#10;        txt_rec1.setOpacity(0.73);&amp;#10;    }&amp;#10;     if (rec2.contains(mouse)) {&amp;#10;        rec2.setOpacity(0.99);&amp;#10;        txt_rec2.setOpacity(2);&amp;#10;     } &amp;#10;    else{&amp;#10;        rec2.setOpacity(0.73);&amp;#10;        txt_rec2.setOpacity(0.73);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;//Function that is going to set the chosen language&amp;#10;function SelectLanguage(rec1, rec2, mouse){&amp;#10;    if (rec1.contains(mouse) &amp;&amp; mouse.getPressed()[0] === 1 ) {&amp;#10;        french = true;&amp;#10;        practiceConditions = &quot;BADEImgConditions_practice_Fr.csv&quot;;&amp;#10;        trialConditions = &quot;BADEImgConditions_Fr.csv&quot;;&amp;#10;    }&amp;#10;    else if (rec2.contains(mouse) &amp;&amp; mouse.getPressed()[0] === 1 ) {&amp;#10;        english = true;&amp;#10;        practiceConditions = &quot;BADEImgConditions_practice_Eng.csv&quot;;&amp;#10;        trialConditions = &quot;BADEImgConditions_Eng.csv&quot;;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;HighlightRect(rect1,  rect2, txt_rect1, txt_rect2, mouse1);&amp;#10;SelectLanguage(rect1,  rect2, mouse1);&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="thisExp.addData(&quot;Language&quot;, english===true ? &quot;en&quot; : &quot;fr&quot;);" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if english==True:&amp;#10;    thisExp.addData(&quot;Language&quot;, &quot;en&quot;)&amp;#10;else:&amp;#10;    thisExp.addData(&quot;Language&quot;, &quot;fr&quot;)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="rect1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="rect1" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.02)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="rect2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="button.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="rect2" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -0.07)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="txt_instr">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_instr" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0.18)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Veuillez sélectionner votre langue.&amp;#10;&amp;#10;Please select your language." valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="txt_rect1">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_rect1" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="rect1.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="FRANÇAIS" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="txt_rect2">
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.023" valType="code" updates="constant" name="letterHeight"/>
        <Param val="txt_rect2" valType="code" updates="None" name="name"/>
        <Param val="0.73" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="rect2.pos" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="ENGLISH" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse1">
        <Param val="rect1, rect2" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="routine" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="lang"/>
    <Routine name="instr"/>
    <Routine name="instr2"/>
    <LoopInitiator loopType="TrialHandler" name="practices">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$practiceConditions" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practices" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practice"/>
    <LoopTerminator name="practices"/>
    <Routine name="ready"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$trialConditions" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
